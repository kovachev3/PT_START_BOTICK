version: '3.8'
x-postgres-common:
  &postgres-common
  image: postgres:14-alpine
  user: ${DB_USER}
  restart: always
  healthcheck:
    test: 'pg_isready -U ${DB_USER} --dbname=${DB_DATABASE}'
    interval: 10s
    timeout: 5s
    retries: 5
networks:
  Bot_network:
    driver: bridge
services:
  db_image:
    <<: *postgres-common
    container_name: db_image
    build:
      context: ./db
      dockerfile: Dockerfile
    ports:
      - ${DB_PORT}
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres 
      -c wal_level=replica 
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
      -c listen_addresses='*' 
    volumes:
      - ./db/00_init.sql:/docker-entrypoint-initdb.d/00_init.sql
    networks:
      Bot_network:
  db_repl_image:
    <<: *postgres-common
    container_name: db_repl_image
    build:
      context: ./db_repl
      dockerfile: Dockerfile
    ports:
      - ${DB_REPL_PORT}
    environment:
      PGUSER: ${DB_REPL_USER}
      PGPASSWORD: ${DB_REPL_PASSWORD}
    command: |
      bash -c "
      rm -rf /var/lib/postgresql/data/*
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=${DB_HOST} --port=${DB_PORT}
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    networks:
      Bot_network:
    depends_on:
      - db_image
    container_name: bot_image_repl

  bot_image:
    container_name: bot_image_
    build:
      context: ./bot
      dockerfile: Dockerfile
    networks:
      Bot_network:
    depends_on:
      - db_image
      - db_repl_image
  
